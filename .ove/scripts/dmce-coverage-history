#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Copyright (c) 2021 Ericsson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

git="$1"
git_full="${OVE_BASE_DIR:?}/$1"
# keep this as early as possible
logfile="${OVE_LAST_COMMAND:?}"
name=$(basename "$0")
_time="${SECONDS}"
err_string=
delimiter="|"

# $1: rev
function dmce_build_test() {
    local dmce_args
    local out
    local ret
    local test_start

    if [ "$1" = "$first" ]; then
        dmce_args="-q -a"
    else
        dmce_args="-q -r $1"
    fi

    err_string=

    ove-echo cyan "ove-dmce launch $dmce_args -- $git"
    out=$(ove-dmce launch "$dmce_args" -- "$git")
    ret=$?
    if [ ${ret} -ne 0 ]; then
        if [[ ${out} == *error* ]]; then
            err_string="$(echo "${out}"| grep error: | sed 's,error: ,,g')"
        else
            err_string="dmce-launcher -q -r $1 failed"
        fi
        ove-echo red "${err_string}"
        return 1
    fi

    # still no probes?
    if ! git grep -q DMCE_PROBE; then
        err_string="no probes inserted"
        return 1
    fi

    # find probe-references.log
    probe_ref="$(grep DMCE_WORK_PATH "$OVE_BASE_DIR"/.dmceconfig | cut -d: -f2)/$git/probe-references.log"
    if [ ! -s "$probe_ref" ]; then
        err_string="probe-references.log not found"
        ove-echo red "${err_string}"
        return 1
    fi

    # sanity check the age of probe-references.log
    now=$(date +%s)
    probe_last_mod=$(stat -c %Y "$probe_ref")
    diff=$((now - probe_last_mod))
    if [ $diff -gt 3 ]; then
        err_string="$probe_ref is too old. age: $diff seconds"
        ove-echo red "${err_string}"
        return 1
    fi

    ove-echo cyan "ove buildme-parallel ${ove_proj}"
    if ! ove buildme-parallel "${ove_proj}" > /dev/null; then
        err_string="ove buildme-parallel ${ove_proj} failed"
        ove-echo red "${err_string}"
        return 1
    fi

    test_start=$(date '+%Y-%m-%d %H:%M:%S')
    ove-echo cyan "ove test ${ove_proj}"
    if ! ove test "${ove_proj}"; then
        err_string="ove test ${ove_proj} failed"
        ove-echo red "${err_string}"
        ret=2
    else
        ret=0
    fi

    if ! journalctl -q --since "${test_start}" | \
        grep -o 'DMCE_PROBE.*' | \
        cut -d: -f4- | \
        sort -V -u > "${OVE_TMP:?}/${name}.log"; then
        err_string="journalctl failed"
        ove-echo red "$err_string"
        return 1
    fi

    if ! ove dmce summary-txt "${OVE_TMP:?}/${name}.log" "$probe_ref"; then
        ove-echo red "dmce-summary-txt failed"
        err_string="'ove dmce summary-txt' failed"
        return 1
    fi

    return $ret
}

function usage() {
    local projs
    local repos

    repos="${OVE_REPO_LIST//${OVE_BASE_DIR}\//}"
    projs="${OVE_PROJECT_LIST}"
    cat << EOF
NAME
       create C/C++ coverage history

SYNOPSIS
       ove ${name} git proj mode [revs...]

OPTIONS
        git
          choose one git of: ${repos}

        proj
          choose one OVE project from: ${projs}

        mode:
          1: delta
          2: full
          4: series
          X: any bitwise combination of the above
             i.e. mode=7 will do delta, series and full coverage for each revision pair.

          NOTE: it's also possible to specify delta/series/full using words. See EXAMPLE below.

        revs: (optional)
          a list of git revision, if not set revision is picked up from 'git -C <git> tag --sort=-version:refname'

DESCRIPTION
        Run this plugin to iterate through the git history of 'git'. The revisions are automatically picked up using:

          $ git tag --sort=-version:refname

        If you want to provide another revision list use the 'revs' option.

        So how does it work? Here's some pseudo code for a delta coverage run (mode=1) that describe all steps performed:

          ---
          for each revision pair (r and r') in 'revs' do:
            $ ove reset-hard p
            $ git clean -dfxq
            $ ove reset-hard p
            $ git clean -dfxq
            $ git checkout -q r
            $ dmce-launcher -q -r r'
            $ ove buildme-parallel p
            $ ove test p
            # save results
          # present results
          ---

        The revisions 'A,B,C,D' stated in the output summary (see EXAMPLES below) are as follows:

        A = Always selected as DMCE 'head' commit.
        B = Only used if 'delta' coverage mode is selected. Selected as DMCE 'base' commit.
        C = Only used if 'series' coverage mode is selected. Selected as DMCE 'base' commit.
        D = Only used if 'full' coverage mode is selected. Selected as DMCE 'base' commit.

        To clarify even further. Consider this git history:

        X---...---Y---P1---P2---P3

        X      = inital commit
        Y      = base commit for patch series P1..P3
        P1..P3 = patch series that we would like to examine. I.e. they are not yet published.

        ...and we run with delta, series and full coverage (mode=7). In this scenario we will run three iterations
        with three DMCE runs per iteration:

        Iteration 1:
          AB: delta  coverage between P3 and P2
          AC: series coverage between P3 and Y
          AD: full   coverage between P3 and X

        Iteration 2:
          AB: delta  coverage between P2 and P1
          AC: series coverage between P2 and Y
          AD: full   coverage between P2 and X

        Iteration 3:
          AB: delta  coverage between P1 and Y
          AC: series coverage between P1 and Y (same interval as AB, but we will run it anyway)
          AD: full   coverage between P1 and X

EXAMPLES
        # delta, series and full code coverage results for four tags (=3 iterations)
        $ ove dmce coverage-history ag ag 7 2.2.0 2.0.0 1.0.3 1.0.2
        ...
        dmce-coverage-history summary:
        3 iterations in 209 seconds
        revs (4): 2.2.0 2.0.0 1.0.3 1.0.2
        #  A      date        subject          B      date        subject          C      date        subject          D        date        subject  dexec[AB]  dprobes[AB]  dcov[AB]  sexec[AC]  sprobes[AC]  scov[AC]  fexec[AD]  fprobes[AD]  fcov[AD]  errors
        1  2.2.0  2018-08-06  Bump version ..  2.0.0  2017-06-04  Bump to v2.0...  1.0.2  2016-12-03  Tag new relea..  0121e6b  2011-11-19  init     6          13           46.2 %    44         58           75.9 %    712        962          74.0 %
        2  2.0.0  2017-06-04  Bump to v2.0...  1.0.3  2017-05-02  Bump version ..  1.0.2  2016-12-03  Tag new relea..  0121e6b  2011-11-19  init     31         35           88.6 %    38         45           84.4 %    709        952          74.5 %
        3  1.0.3  2017-05-02  Bump version ..  1.0.2  2016-12-03  Tag new relea..  1.0.2  2016-12-03  Tag new relea..  0121e6b  2011-11-19  init     7          10           70.0 %    7          10           70.0 %    697        940          74.1 %

        # delta code coverage for two tags
        $ ove dmce coverage-history ag ag 1 2.2.0 2.0.0

        # specifying 'mode' using words
        $ ove dmce coverage-history ag ag delta series 2.2.0 2.0.0

        # delta and full code coverage
        $ ove dmce coverage-history ag ag 3

        # delta code coverage the last month
        $ revs=\$(git -C \$OVE_BASE_DIR/ag log --since='1 month' --oneline --format=%h | xargs)
        $ ove dmce coverage-history ag ag 1 \$revs
EOF
}

function init() {
    local i
    local j
    local out

    # usage and sanity checks
    if [ $# -lt 3 ]; then
        usage
        exit 1
    elif [ ! -d "${git_full}" ]; then
        echo "error: ${git_full} is not a directory"
        usage
        exit 1
    elif [ ! -d "${git_full}"/.git ]; then
        echo "error: ${git_full} does not appear to be a git repo"
        usage
        exit 1
    fi

    ove_proj="$2"
    shift 2

    delta=0
    full=0
    series=0
    if [[ $* == *delta* ]] || [[ $* == *series* ]] || [[ $* == *full* ]]; then
        for i in "$@"; do
            if [[ "$i" != "delta" ]] && [[ "$i" != "series" ]] && [[ "$i" != "full" ]]; then
                continue
            fi
            eval "$i"=1
            shift
        done
    else
        mode="$1"
        shift
        if [[ ! "${mode}" =~ ^[1-7]$ ]]; then
            echo "error: unknown mode: '$mode'"

            #usage
            exit 1
        fi
        if [ $((mode & 0x1)) -eq 1 ]; then
            delta=1
        fi

        if [ $((mode & 0x2)) -eq 2 ]; then
            full=1
        fi

        if [ $((mode & 0x4)) -eq 4 ]; then
            series=1
        fi
    fi

    ove-echo cyan "${name}: delta: $delta full: $full series: $series"

    if [ $# -eq 0 ]; then
        mapfile -t revs <<<"$(git -C "${git_full}" tag --sort=-version:refname)"
    else
        revs=("$@")
    fi

    nbr_revs=${#revs[@]}
    if [ "${nbr_revs}" -eq 0 ]; then
        echo "error: no revs"
        exit 1
    elif [ "${nbr_revs}" -eq 1 ]; then
        echo "error: provide at least two revisions"
        exit 1
    fi

    # sanity check
    for i in $(seq 0 $((nbr_revs - 1))); do
        if ! git -C "${git_full}" cat-file -e "${revs[i]}" &> /dev/null; then
            echo "error: '${revs[i]}' is not a valid rev"
            exit 1
        fi

        j=
        # use tags if available
        if ! j=$(git -C "${git_full}" name-rev --name-only --tags --no-undefined "${revs[$i]}" &> /dev/null); then
            # no name-rev? use short hash
            j=$(git -C "${git_full}" rev-parse --short "${revs[$i]}")
        fi

        if [ "x$j" != "x" ]; then
            revs[$i]="$j"
        fi
    done

    worktree="${OVE_TMP}/${name}"
    ove-worktree remove "$worktree" || true
    ove-echo cyan "ove-worktree add ${worktree}"
    if ! ove-worktree add "$worktree"; then
        echo "error: 'ove-worktree add ${worktree}' failed"
        exit 1
    fi

    if ! cd "${worktree}"; then
        echo "error: 'cd ${worktree}' failed, weird!"
        exit 1
    fi

    # shellcheck disable=SC1091
    source ove
    if ! ove buildme dmce; then
        echo "error: 'ove buildme dmce' failed, weird!"
        exit 1
    fi

    if ! cd "${worktree}/${git}"; then
        echo "error: 'cd ${worktree}/${git}' failed, weird!"
        exit 1
    fi

    if ! ove dmce launch -c -q -- "$git"; then
        echo "error: 'ove-dmce launch -c -q -- $git' failed"
        exit 1
    fi

    ove-echo cyan "ove-dmce set-profile syslog"
    if ! ove dmce set-profile syslog; then
        echo "error: 'ove-dmce set-profile syslog' failed"
        exit 1
    fi

    if ! command -v journalctl > /dev/null; then
        echo "error: command 'journalctl' is missing"
        exit 1
    fi

    # get current branch
    if ! current_branch=$(git rev-parse --abbrev-ref HEAD); then
        exit 1
    fi

    echo "revs (${nbr_revs}): ${revs[*]}"
}

function summary() {
    ove-dmce launch -c -q -- "$git" || true
    git checkout -q "${current_branch}" || true

    if [ -s "${logfile}" ] && grep -q ^iteration "${logfile}"; then
        echo
        echo "${name} summary:"
        echo "$(grep -c ^iteration "${logfile}") iterations in $((SECONDS - _time)) seconds"
        echo "revs (${nbr_revs}): ${revs[*]}"
        while true; do
            echo "#${delimiter}A${delimiter}date${delimiter}subject${delimiter}B${delimiter}date${delimiter}subject${delimiter}C${delimiter}date${delimiter}subject${delimiter}D${delimiter}date${delimiter}subject${delimiter}dexec[AB]${delimiter}dprobes[AB]${delimiter}dcov[AB]${delimiter}sexec[AC]${delimiter}sprobes[AC]${delimiter}scov[AC]${delimiter}fexec[AD]${delimiter}fprobes[AD]${delimiter}fcov[AD]${delimiter}errors"
            grep ^iteration "${logfile}" | sed 's,^iteration ,,g'
            break
        done | column -t -s"${delimiter}"
    fi
}

function main() {
    local base_date
    local head_date
    local _errors=0

    init "$@"
    trap summary EXIT

    ove-echo cyan "ove reset-hard ${git}"
    if ! ove reset-hard "${git}"; then
        ove-echo red "error: 'ove reset-hard ${git}' failed"
        exit 1
    fi
    ove-echo cyan "git clean -dfxq"
    if ! git clean -dfxq; then
        ove-echo red "error: 'git clean -dfxq' failed"
        exit 1
    fi

    first=$(git --no-pager -C "${git_full}" log --oneline --pretty=%h | tail -1)
    first_subject=$(git -C "${git_full}" log --pretty="%<(15,trunc)%s" -1 "$first")
    # shellcheck disable=SC2116
    first_subject=$(echo "$first_subject")
    first_date=$(git -C "${git_full}" log --pretty=%ai "${first}" -1 | awk '{print $1}')

    series_base="${revs[$((nbr_revs - 1))]}"
    series_subject=$(git -C "${git_full}" log --pretty="%<(15,trunc)%s" -1 "$series_base")
    # shellcheck disable=SC2116
    series_subject=$(echo "$series_subject")
    series_date=$(git -C "${git_full}" log --pretty=%ai "${series_base}" -1 | awk '{print $1}')

    na_string="NA${delimiter}NA${delimiter}NA${delimiter}NA${delimiter}NA${delimiter}NA${delimiter}NA${delimiter}NA${delimiter}NA"
    for i in $(seq 0 $((nbr_revs - 2))); do
        head=${revs[i]}
        head_subject=$(git -C "${git_full}" log --pretty="%<(15,trunc)%s" -1 "$head")
        # shellcheck disable=SC2116
        head_subject=$(echo "$head_subject")
        head_date=$(git -C "${git_full}" log --pretty=%ai "${head}" -1)
        head_date=${head_date%% *}

        base=${revs[i+1]}
        base_subject=$(git -C "${git_full}" log --pretty="%<(15,trunc)%s" -1 "$base")
        # shellcheck disable=SC2116
        base_subject=$(echo "$base_subject")
        base_date=$(git -C "${git_full}" log --pretty=%ai "${base}" -1)
        base_date=${base_date%% *}

        prefix="iteration $((i+1))${delimiter}${head}${delimiter}${head_date}${delimiter}${head_subject}${delimiter}${base}${delimiter}${base_date}${delimiter}${base_subject}${delimiter}${series_base}${delimiter}${series_date}${delimiter}${series_subject}${delimiter}${first}${delimiter}${first_date}${delimiter}${first_subject}"
        if [ "${head}" = "${base}" ]; then
            echo "${prefix}${delimiter}${na_string}${delimiter}head=base"
            continue
        fi

        # cleanup
        ove-echo cyan "ove reset-hard ${git}"
        ove reset-hard "${git}"
        ove-echo cyan "git clean -dfxq"
        git clean -dfxq

        # checkout head
        ove-echo cyan "git checkout -q ${head}"
        if ! git checkout -q "${head}"; then
            echo "${prefix}${delimiter}${na_string}${delimiter}git checkout ${head} failed"
            continue
        fi

        overall_err_string=

        # delta coverage
        delta_exec=" "
        delta_probes=" "
        delta_coverage=" "
        if [ "${delta}" -eq 1 ]; then
            ove-echo cyan "delta coverage ${base}"
            run_one "${base}"
            ret=$?
            if [ $ret -eq 1 ]; then
                ((_errors++))
            else
                delta_exec=${a_exec}
                delta_probes=${a_probes}
                delta_coverage=${a_coverage}
            fi

            if [ "x$err_string" != "x" ]; then
                if [ "x$overall_err_string" = "x" ]; then
                    overall_err_string="d@$err_string"
                else
                    overall_err_string+=" d@$err_string"
                fi
            fi
        fi

        # series coverage
        series_exec=" "
        series_probes=" "
        series_coverage=" "
        if [ "${series}" -eq 1 ]; then
            ove-echo cyan "series coverage ${series_base}"
            run_one "${series_base}"
            ret=$?
            if [ $ret -eq 1 ]; then
                ((_errors++))
            else
                series_exec=${a_exec}
                series_probes=${a_probes}
                series_coverage=${a_coverage}
            fi

            if [ "x$err_string" != "x" ]; then
                if [ "x$overall_err_string" = "x" ]; then
                    overall_err_string="s@$err_string"
                else
                    overall_err_string+=" s@$err_string"
                fi
            fi
        fi

        # full coverage
        full_exec=" "
        full_probes=" "
        full_coverage=" "
        if [ "${full}" -eq 1 ]; then
            ove-echo cyan "full coverage ${first}"
            run_one "${first}"
            ret=$?
            if [ $ret -eq 1 ]; then
                ((_errors++))
            else
                full_exec=${a_exec}
                full_probes=${a_probes}
                full_coverage=${a_coverage}
            fi

            if [ "x$err_string" != "x" ]; then
                if [ "x$overall_err_string" = "x" ]; then
                    overall_err_string="f@$err_string"
                else
                    overall_err_string+=" f@$err_string"
                fi
            fi
        fi

        echo "---"
        echo "${prefix}${delimiter}${delta_exec}${delimiter}${delta_probes}${delimiter}${delta_coverage}${delimiter}${series_exec}${delimiter}${series_probes}${delimiter}${series_coverage}${delimiter}${full_exec}${delimiter}${full_probes}${delimiter}${full_coverage}${delimiter}${overall_err_string}"
        echo "---"
    done

    if [ $_errors -ge $((i+1)) ]; then
        exit 1
    fi

    exit 0
}

function run_one {
    local ret

    ove reset-hard "${git}"
    git clean -dfxq

    dmce_build_test "$1"
    ret=$?
    if [ $ret -eq 1 ]; then
        a_coverage=0
        a_probes=0
        a_exec=0
        return 1
    fi

    a_exec=$(grep '^Uniq probes executed:' "${logfile}" | tail -1)
    a_exec=${a_exec#*: }
    a_exec=${a_exec//$'\r'/}

    a_probes=$(grep '^Number of probes:' "${logfile}" | tail -1)
    a_probes=${a_probes#*: }
    a_probes=${a_probes//$'\r'/}

    a_coverage=$(grep '^Test coverage:' "${logfile}" | tail -1)
    a_coverage=${a_coverage#*: }
    a_coverage=${a_coverage//$'\r'/}

    return $ret
}

main "$@"

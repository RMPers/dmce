#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Copyright (c) 2021 Ericsson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

function usage() {
    local projs
    local repos

    repos="${OVE_REPO_LIST//${OVE_BASE_DIR}\//}"
    repos="${repos/  / }"
    projs="${OVE_PROJECT_LIST}"
    cat << EOF
NAME
        Insert DMCE probes into one repo and build it

SYNOPSIS
        ove dmce trace-prepare git proj

OPTIONS
        git:
          choose one git of: ${repos}

        proj:
          choose one from: ${projs}

DESCRIPTION
        This plugin is a helper that will insert probes into one git repo. As OVE
        know how to build the project 'proj' this plugin will also build the code.

        Use 'ove dmce trace-decode' to decode the trace buffer. Don't forget to install 'fzf'!

EXAMPLES
        # install fzf
        $ <package manager> install fzf

        # prepare the git and build it
        $ ove dmce trace-prepare ag ag

        # run some test, here we're searching for the word 'foobar'
        $ ag foobar

        # decode the trace buffer and launch an interactive fzf viewer
        $ ove dmce trace-decode ag

        # oneliner (all of the above in one go)
        $ ove dmce trace-prepare ag ag && { ag foobar; ove dmce trace-decode ag; }
EOF
}

function main() {
    git="$1"
    ove_proj="$2"
    git_full="${OVE_BASE_DIR:?}/$1"

    # usage and sanity checks
    if [ $# -lt 2 ]; then
        usage
        exit 1
    elif [ ! -d "${git_full}" ]; then
        echo "error: ${git_full} is not a directory"
        usage
        exit 1
    elif [ ! -d "${git_full}"/.git ]; then
        echo "error: ${git_full} does not appear to be a git repo"
        usage
        exit 1
    fi

    name="$(basename "$0")-${git/\//_}"

    echo "$ cd ${git_full}"
    if ! cd "${git_full}"; then
        echo "error: 'cd ${git_full}' failed, weird!"
        exit 1
    fi

    echo "$ ove-dmce set-profile trace"
    if ! ove-dmce set-profile trace; then
        echo "error: 'ove dmce set-profile trace' failed"
        exit 1
    fi

    echo "$ ove-dmce launch -a -- $git_full"
    out=$(ove-dmce launch -a -- "$git_full")
    ret=$?
    if [ ${ret} -ne 0 ]; then
        if [[ ${out} == *error* ]]; then
            err_string="$(echo "${out}"| grep error: | sed 's,error: ,,g')"
        else
            err_string="'ove-dmce launch -a -- $git_full' failed"
        fi
        ove-echo red "${err_string}"
        exit 1
    fi

    echo "$ ove build ${ove_proj} && ove install ${ove_proj}"
    if ! ove build "${ove_proj}" > /dev/null || ! ove install "${ove_proj}" > /dev/null; then
        err_string="ove build or install for probed project ${ove_proj} failed"
        ove-echo red "${err_string}"
        if [ -s "${OVE_LAST_COMMAND}" ]; then
            cat "${OVE_LAST_COMMAND}"
        fi

        exit 1
    fi

    nbr_of_probes=$(git grep 'DMCE_PROBE([0-9]\+' | grep -o 'DMCE_PROBE([0-9]\+' | cut -d'(' -f2 | sort -V | tail -1)
    echo "info: repo '${git_full}' is now instrumented with ${nbr_of_probes} probe(s). Run some test (executable files below) and then 'ove dmce trace-decode ${git}'"
    elfs=$(find "${git_full}" -type f -perm -u=x -print -exec file {} \;| grep ELF | cut -d: -f1 | cat -n)
    if [ "x$elfs" = "x" ]; then
        echo "warning: no executable ELF files found in '${git}'. Building artifacts outside the git repo? Or did you select the wrong OVE project '$ove_proj'?"
    else
        echo "ELF files within the '${git}' repo:"
        printf "%s\n" "$elfs"
    fi

    # remove any already existing trace lock file at dmce-configure-local default path
    rm -rf /tmp/$LOGNAME/dmce-trace-buffer-lock

    exit 0
}

main "$@"

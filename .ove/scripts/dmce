#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Copyright (c) 2020-2021 Ericsson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

if [ ! -e "${OVE_BASE_DIR:?}/.dmceconfig" ]; then
    echo "error: '\$OVE_BASE_DIR/.dmceconfig' not found, try to install DMCE by running 'ove install dmce'"
    exit 1
fi

default_args="-f ${OVE_BASE_DIR:?}/.dmceconfig"

function usage {
        cat << EOF
NAME
        OVE plugin for DMCE

SYNOPSIS
        ove dmce <command> [options] [-- git...]

DESCRIPTION
        Use DMCE within a OVE workspace

LOW-LEVEL COMMANDS
        set-profile:
          # select DMCE profile
          $ ove dmce set-profile [options]

        launch:
          # run 'dmce-launcher' in sequence on all/specified repos
          $ ove dmce launch [options] [-- git...]

        summary-bin:
          # run 'dmce-summary-bin'
          $ ove dmce summary-bin [options]

        summary-txt:
          # run 'dmce-summary-txt'
          $ ove dmce summary-txt [options]

        trace:
          # run 'dmce-trace'
          $ ove dmce trace [options]

HIGH-LEVEL COMMANDS
EOF
    for f in "${OVE_ACTIVE_REPO_DIR}"/.ove/scripts/dmce-*; do
        g=${f##*/}
        if [[ $g == *.* ]]; then
            continue
        fi
        g=${g/dmce-}

        echo "        $g:"
        echo "          # run 'ove dmce $g' for detailed description"
        echo
    done
    echo "FILES"
    echo "        \$OVE_BASE_DIR/.dmceconfig"
    if [ -d "${OVE_BASE_DIR}"/.config/dmce ]; then
        find "${OVE_BASE_DIR}"/.config/dmce | sed -e "s,$OVE_BASE_DIR,\$OVE_BASE_DIR," -e 's,^,        ,g'
    else
        echo "  ${OVE_BASE_DIR}/.config/dmce/*"
    fi
    echo
    cat << EOF
EXAMPLES
        # set 'trace' profile
        $ ove dmce set-profile trace

        # launch DMCE on two repos
        $ ove dmce launch -a -q -- ag dmce-examples

        # trace, build, run, view in one go
        $ ove dmce trace-prepare ag ag && { ag foobar; ove dmce trace-decode ag; }
EOF
}

function _getopts {
    local args

    args="$*"
    if [[ ${args} = *--[[:space:]]* ]]; then
        opts=${args%%-- *}
        repos=${args##*--}
        repos="${repos//${OVE_BASE_DIR}\//}"
    else
        opts=${args}
        repos="${OVE_REPO_LIST//${OVE_BASE_DIR}\//}"
    fi
}

# $1: prog
function _find {
    # try to find binary
    if ! command -v "${1}" > /dev/null; then
        prog="${OVE_ACTIVE_REPO_DIR:?}/${1}"
    else
        prog="$(command -v "${1}")"
    fi

    if [ ! -e "${prog}" ]; then
        echo "error: can not find '${1}'"
        exit 1
    fi
}

function run {
    echo "$ ${prog} ${opts}" 1>&2
    eval "${prog}" "${opts}"
}

function set_profile {
    local args

    shift
    _find "dmce-set-profile"
    _getopts "$@"
    opts="$default_args -p -d $OVE_BASE_DIR/.config/dmce $opts"
    run
}

function launch {
    local opts
    local r
    local repos

    shift

    _find "dmce-launcher"
    if [ $# -eq 0 ]; then
        opts="-a -q"
        repos="${OVE_REPO_LIST//${OVE_BASE_DIR}\//}"
    else
        _getopts "$@"
    fi

    opts="$default_args $opts"
    for r in $repos; do
        [ -d "$OVE_BASE_DIR"/"$r" ] || continue
        cd "$OVE_BASE_DIR/$r" || continue
        if [ "x$PWD" = "x${OVE_ACTIVE_REPO_DIR}" ]; then
            continue
        fi
        run
    done
}

function trace {
    shift
    _find "dmce-trace"
    _getopts "$@"
    run
}

function summary_bin {
    shift
    _find "dmce-summary-bin"
    _getopts "$@"
    run
}

function summary_txt {
    shift
    _find "dmce-summary-txt"
    _getopts "$@"
    run
}

function main {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi

    cmd=$1
    n="${OVE_ACTIVE_REPO_DIR}/.ove/scripts/dmce-${cmd/_/-}"
    if [ -s "${n}" ]; then
        shift
        if ! "${n}" "$@"; then
            exit 1
        fi
    elif [ "x$(type -t "${1/-/_}")" != "xfunction" ]; then
        echo "error: '$1' unknown command"
        exit 1
    else
        if ! ${1/-/_} "$@"; then
            exit 1
        fi
    fi
}

main "$@"
